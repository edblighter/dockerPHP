# Container to run the Caddy web server and proxy.
# Note: The volumes at this container are refered at the root folder of the project.
# Run the service at the root folder using the -f flag for the default values. 
# Ex: docker compose -f services/caddy/docker-compose.yml up -d
# or
# docker compose -f services/caddy/docker-compose.yml --env-file services/caddy/.env.caddy up -d
# to spin up the container with custom values.
#
# Default HTTP_PORT is 8000 and can be changed with the env variables at services/caddy/.env.caddy 
#
# To disable the https redirect you can add { auto_https off } at the beginning of conf/CaddyFile
#
# You can create the vhosts at sites folder using the Caddyfile syntax.
#
# Default services for this project can be found at services folder and snippets for easy site creation 
# at snippets
#

services:
  web:
    image: ${CADDY_IMAGE:-caddy}:${CADDY_VERSION:-alpine}
    container_name: ${APP_CADDY_CONTAINER_NAME:-app_caddy}
    restart: on-failure
    healthcheck:
      test: wget --no-verbose --tries=1 --output-document=/dev/null http://127.0.0.1:2019/metrics &> /dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 0s
    volumes:
      - $PWD/services/caddy/conf/CaddyFile:/etc/caddy/Caddyfile:ro
      - $PWD/services/caddy/conf/services/:/etc/caddy/services/
      - $PWD/services/caddy/conf/sites/:/etc/caddy/sites/
      - $PWD/services/caddy/conf/snippets/:/etc/caddy/snippets/
      - $PWD/services/caddy/conf/security.conf:/etc/caddy/security
      - app_volume:/srv
      - $PWD/docker-data/caddy/data:/data
      - $PWD/docker-data/caddy/config:/config
    networks:
      - ${APP_NETWORK_NAME:-app_network}
    cap_add:
      - NET_ADMIN
    environment:
      TZ: ${APP_TIMEZONE:-America/Sao_Paulo}
    ports:
      - "${APP_HTTP_PORT:-8000}:80"
      - "${APP_HTTPS_PORT:-443}:443"
      - "${APP_HTTPS_PORT:-443}:443/udp"
    expose:
      - 80 # http
      - 443 # https
    mem_reservation: "15M"
    mem_limit: "${CADDY_MEM_LIMIT:-300M}"
volumes:
  app_volume:
    name: app_volume
    driver_opts:
      type: none
      o: bind
      device: $PWD/app
networks:
  app_network:
    name: ${APP_NETWORK_NAME:-app_network}
    driver: bridge
